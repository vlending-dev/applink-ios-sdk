// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name AppLink
@_exported import AppLink
import Combine
import Dispatch
import Foundation
import MobileCoreServices
import Security
import Swift
import SystemConfiguration
import UIKit
import UniformTypeIdentifiers
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import zlib
@objc @_hasMissingDesignatedInitializers public class LinkError : Foundation.NSError {
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  public var error: any Swift.Error {
    get
  }
  @objc deinit
}
public struct AppLinkDataError : Swift.Codable {
  public var code: AppLink.LinkErrorrType?
  public var message: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct AppLinkRequest : Swift.Codable {
  public var webURL: Swift.String?
  public var imageURL: Swift.String?
  public var scheme: Swift.String?
  public var utm: AppLink.AppLinkUTM?
  public var title: Swift.String?
  public var description: Swift.String?
  public var deeplinkAction: Swift.String?
  public init(scheme: Swift.String?, title: Swift.String?, description: Swift.String? = nil, url: Swift.String?)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public let AppLink: AppLink.AppLinkSession
public enum AppLinkInfo {
  public static let version: Swift.String
}
public enum HTTPStatusCode : Swift.Int {
  public enum ResponseType {
    case informational
    case success
    case redirection
    case clientError
    case serverError
    case undefined
    public static func == (a: AppLink.HTTPStatusCode.ResponseType, b: AppLink.HTTPStatusCode.ResponseType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  case `continue`
  case switchingProtocols
  case processing
  case ok
  case created
  case accepted
  case nonAuthoritativeInformation
  case noContent
  case resetContent
  case partialContent
  case multiStatus
  case alreadyReported
  case IMUsed
  case multipleChoices
  case movedPermanently
  case found
  case seeOther
  case notModified
  case useProxy
  case switchProxy
  case temporaryRedirect
  case permenantRedirect
  case badRequest
  case unauthorized
  case paymentRequired
  case forbidden
  case notFound
  case methodNotAllowed
  case notAcceptable
  case proxyAuthenticationRequired
  case requestTimeout
  case conflict
  case gone
  case lengthRequired
  case preconditionFailed
  case payloadTooLarge
  case URITooLong
  case unsupportedMediaType
  case rangeNotSatisfiable
  case expectationFailed
  case teapot
  case misdirectedRequest
  case unprocessableEntity
  case locked
  case failedDependency
  case upgradeRequired
  case preconditionRequired
  case tooManyRequests
  case requestHeaderFieldsTooLarge
  case noResponse
  case unavailableForLegalReasons
  case SSLCertificateError
  case SSLCertificateRequired
  case HTTPRequestSentToHTTPSPort
  case clientClosedRequest
  case internalServerError
  case notImplemented
  case badGateway
  case serviceUnavailable
  case gatewayTimeout
  case HTTPVersionNotSupported
  case variantAlsoNegotiates
  case insufficientStorage
  case loopDetected
  case notExtended
  case networkAuthenticationRequired
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum LinkErrorrType {
  case httpStatus(AppLink.HTTPStatusCode)
  case unknown(code: Swift.Int)
}
public enum AppLinkDataCodingError : Swift.Error {
  case decoding(Swift.String)
}
public struct AppLinkUTM : Swift.Codable {
  public var source: Swift.String?
  public var medium: Swift.String?
  public var campaignName: Swift.String?
  public init?(source: Swift.String?, medium: Swift.String?, campaign: Swift.String?)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct AppLinkDataInfo : Swift.Codable {
  public var title: Swift.String?
  public var contents: Swift.String?
  public var imageURL: Swift.String?
  public var utm: AppLink.AppLinkUTM?
  public var scheme: Swift.String?
  public var deeplinkAction: Swift.String?
  public var webURL: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class AppLinkSession : ObjectiveC.NSObject {
  public var domainURIPrefix: Swift.String? {
    get
    set
  }
  public var apiKey: Swift.String?
  public var userId: Swift.String?
  public var customScheme: Swift.String?
  public func isAppLink(_ url: Foundation.URL) -> Swift.Bool
  public func parse(url: Foundation.URL, completion: @escaping ((AppLink.AppLinkDataInfo?, Swift.String, [Foundation.URLQueryItem]?, AppLink.LinkError?) -> Swift.Void))
  public func request(link request: AppLink.AppLinkRequest, completion: @escaping ((Foundation.URL?, AppLink.LinkError?) -> Swift.Void))
  @objc deinit
}
extension AppLink.HTTPStatusCode : Swift.Equatable {}
extension AppLink.HTTPStatusCode : Swift.Hashable {}
extension AppLink.HTTPStatusCode : Swift.RawRepresentable {}
extension AppLink.HTTPStatusCode.ResponseType : Swift.Equatable {}
extension AppLink.HTTPStatusCode.ResponseType : Swift.Hashable {}
