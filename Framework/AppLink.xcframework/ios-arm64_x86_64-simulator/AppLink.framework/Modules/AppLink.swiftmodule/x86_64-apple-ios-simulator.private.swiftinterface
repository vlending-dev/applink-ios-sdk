// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name AppLink
@_exported import AppLink
import Combine
import Dispatch
import Foundation
import MobileCoreServices
import Security
import Swift
import SystemConfiguration
import UIKit
import UniformTypeIdentifiers
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import zlib
@objc @_hasMissingDesignatedInitializers public class LinkError : Foundation.NSError {
  public var message: Swift.String?
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  public var error: any Swift.Error {
    get
  }
  @objc deinit
}
public struct AppLinkDataError : Swift.Codable {
  public var code: Swift.Int?
  public var message: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct AppLinkRequest : Swift.Codable {
  public var imageURL: Swift.String?
  public var utm: AppLink.AppLinkUTM?
  public var deeplinkAction: Swift.String?
  public init(title: Swift.String, description: Swift.String? = nil, url: Swift.String?)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public let AppLink: AppLink.AppLinkSession
public enum AppLinkInfo {
  public static let version: Swift.String
}
public enum AppLinkDataCodingError : Swift.Error {
  case decoding(Swift.String)
}
public struct AppLinkUTM : Swift.Codable {
  public var source: Swift.String?
  public var medium: Swift.String?
  public var campaignName: Swift.String?
  public init?(source: Swift.String?, medium: Swift.String?, campaign: Swift.String?)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct AppLinkDataInfo : Swift.Codable {
  public var title: Swift.String?
  public var contents: Swift.String?
  public var imageURL: Swift.String?
  public var utm: AppLink.AppLinkUTM?
  public var scheme: Swift.String?
  public var deeplinkAction: Swift.String?
  public var webURL: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class AppLinkSession : ObjectiveC.NSObject {
  public var domainURIPrefix: Swift.String? {
    get
    set
  }
  public var apiKey: Swift.String?
  public var userId: Swift.String?
  public var customScheme: Swift.String?
  public func isAppLink(_ url: Foundation.URL) -> Swift.Bool
  public func parse(url: Foundation.URL, completion: @escaping ((AppLink.AppLinkDataInfo?, Swift.String, [Foundation.URLQueryItem]?, AppLink.LinkError?) -> Swift.Void))
  public func request(link request: AppLink.AppLinkRequest, completion: @escaping ((Foundation.URL?, AppLink.LinkError?) -> Swift.Void))
  @objc deinit
}
