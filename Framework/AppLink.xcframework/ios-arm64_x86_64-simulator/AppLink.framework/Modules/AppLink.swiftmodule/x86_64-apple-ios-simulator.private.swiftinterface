// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name AppLink
@_exported import AppLink
import Foundation
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum LinkErrorrType : Swift.Int {
  case unauthorized
  case missingParameter
  case tooManyRequest
  case invalidParameter
  case badRequest
  case serverError
  case invalidURL
  case unknown
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers public class LinkError : Foundation.NSError {
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  public var error: any Swift.Error {
    get
  }
  @objc deinit
}
public struct AppLinkDataError : Swift.Codable {
  public var code: AppLink.LinkErrorrType?
  public var message: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public let AppLink: AppLink.AppLinkSession
public enum AppLinkInfo {
  public static let version: Swift.String
}
public enum AppLinkDataCodingError : Swift.Error {
  case decoding(Swift.String)
}
public struct AppLinkDataInfo : Swift.Codable {
  public var title: Swift.String?
  public var contents: Swift.String?
  public var thumbnail: Swift.String?
  public var utm: AppLink.AppLinkDataInfo.AppLinkUTM?
  public var scheme: Swift.String?
  public var action: Swift.String?
  public var webURL: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public struct AppLinkUTM : Swift.Codable {
    public var source: Swift.String?
    public var medium: Swift.String?
    public var campaignName: Swift.String?
    public init(from decoder: any Swift.Decoder) throws
    public func encode(to encoder: any Swift.Encoder) throws
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class AppLinkSession : ObjectiveC.NSObject {
  public var apiKey: Swift.String?
  public var domainURIPrefix: Swift.String?
  public var userId: Swift.String?
  public var customScheme: Swift.String?
  public func isAppLink(_ url: Foundation.URL) -> Swift.Bool
  public func parse(url: Foundation.URL, completion: @escaping ((AppLink.AppLinkDataInfo?, Swift.String, [Foundation.URLQueryItem]?, AppLink.LinkError?) -> Swift.Void))
  @objc deinit
}
extension AppLink.LinkErrorrType : Swift.Equatable {}
extension AppLink.LinkErrorrType : Swift.Hashable {}
extension AppLink.LinkErrorrType : Swift.RawRepresentable {}
